HeLX Spec A 'untitled' //Cmd-b builds, cmd-s downloads, cmd-k clears. Click divider to change theme. Replace untitled with the title of your document.

// Major differences from common programming languages:
// 0t is true, 0f is false
// 0n is null, 0u is undefined
// 0i is Infinity, 0l is epsilon (limit)
// 0v is NotANumber (think of it as void)
//
// Exponentiation operator is ^ (2^3 == 8)
// Bitwise xor is ^^, bitwise not is !! (typically ~)
// a ?= b means if a evaluates to 0f, then a = b. Otherwise, a stays the same
//
// Single quotes wrap normal strings
// Double quotes wrap template literals
// Forward slashes wrap regular expressions
//
// All variables are block scoped and no shadowing allowed
// PublicVariable = 3
// PrivateVariable: 3
// Public and private variables cannot have the same name
//
// Postfix inc/decrement (++i) not supported due to references implementation
// i++ is what ++i traditionally is. Traditional i++ does not exist
//
// Think of [] as array, () as function, and {} as an evaulation
// {3 +5} ^2 is valid while (3 +5) ^2 is not
//
// Finally, whitespace is not ignored!
// Commas are almost equivalent to line breaks (line breaks can be followed by tabbed blocks)


//////////////////////////////////////////////////////////////////////////
// Variable names over 11 characters long encounter bugs in the web IDE //
//////////////////////////////////////////////////////////////////////////

// Let's look at Fizzbuzz for basic syntax
for i of [0 2 .. 100]
	output = ''
	if i % 3 == 0, output += 'Fizz'
	if i % 5 == 0, output += 'Buzz'
	if output != '', print( i output )


print('')

// Now let's see how references work
arr = [ [1 2 3] [4 5 6] ]
print( 'Original Array:' arr )

arrCopy = arr[0]
arrRef @= arr[1]

arrCopy = 'Replaced'
arrRef = 'Replaced'

print( 'Modified Array:' arr )
print( 'Array Copy:' arrCopy )
print( 'Array Reference:' arrRef )


print('')

// References in a for loop
arr = [ 1..5 ]
print( 'Original Array:' arr )

for i of arr, i ^= 2
print( 'Array iterated w/ for of:' arr )

for i @of arr, i ^= 2
print( 'Array iterated w/ for @of:' arr )


print('')

// Quick, a factorial function
fac = ( x ) =>
	if x == 0, return 1
	return fac( x-1 ) *x

print( fac(5) )
print( fac(10) )


print('')

// Classes are not a finished feature
// They look similar to functions except lack a return statement
// Below is a linear congruential generator class
lcg = ( seed mult inc mod ) =>
	mult ?= 378
	inc ?= 2310
	mod ?= 10000
	state: seed
	next: () =>
		return state = { state *mult +inc } %mod

rand = lcg( 1248 )
print( rand.next() )
print( rand.next() )
print( rand.next() )